type int2op = (int -> int -> int) ;
type redtype = int2op -> int -> int -> int;
let reduce: redtype = 
fn g:int2op, b:int, k:int  => {
    if (k == 0) { b }
    else {
         g (k) (reduce (g) (b) (k-1) )
      }
  };
let tri = reduce (fn n:int, p:int => { println (n+p); n+p }) (1) ;
tri (100)
;;

let k = -1;
let om: (int -> int)->int = fn f:int->int => { f (k)};
om (fn k:int => {k*k})
;;



let c = 0;
let L = 1000;
let m = box(L);
let S = box(c);
(
while (!m>0) {
    m := !m - 1;
    S := !S + !m
};
!S
)
;;


type i2i = int->int;
let sigfpe:ref<int->int> = box ( fn x:int => {x} );
let setfpe = fn h:int->int => { sigfpe := h };
let div = fn n:int,m:int => {
      if (m==0) { (!sigfpe) (n) }
        else { n / m}
};
setfpe (fn v:int => { -1 });
div (2) (0)
;;


type i2i = int->int;
type refi2i = ref<i2i>;
let sigfpe:refi2i = box ( fn x:int => {x} );
let setfpe = fn h:i2i => { sigfpe := h };
let div = fn n:int,m:int => {
      if (m==0) { (!sigfpe) (n) }
        else { n / m}
};
setfpe (fn v:int => { -1 });
div (2) (0)
;;



let knot = box (fn x:int => {x});
let fact = fn n:int => {
      if (n==0) { 1}
        else { n * ((!knot)( n - 1 ))}};
knot := fact;
fact (6)
;;


type money = int;
let x:money = 2;
x+1;;



type knott = ref<int->int>;
let knot:knott = box (fn x:int => {x});
let fact = fn n:int => {
      if (n==0) { 1}
        else { n * ((!knot)( n - 1 ))}};
knot := fact;
fact (6)
;;



type Iaccessor = ref<int> -> ref<int> -> int;
type Igettype = (Iaccessor -> int)->int;
type Isettype = (Iaccessor -> int) -> int -> int;

let mkpair =
    fn a:int,b:int => { 
        let l = box(a);
        let r = box(b);
        fn f:Iaccessor => { f (l) (r) }
};
let getfst:Igettype =
    fn p:Iaccessor->int =>
        { p (fn a:ref<int>,b:ref<int> => { !a }) };

let getsnd:Igettype =
    fn p:Iaccessor->int =>
        { p (fn a:ref<int>,b:ref<int> => { !b })};

let setfst:Isettype  =
    fn p:Iaccessor->int,v:int =>
        { p (fn a:ref<int>,b:ref<int> => { a := v })};

let setsnd:Isettype =
    fn p:Iaccessor->int,v:int =>
        { p (fn a:ref<int>,b:ref<int> => { b := v })};

let x = mkpair (1) (2);
    setfst (x) (10);
    setsnd (x) (20);
    (getfst (x)) + (getsnd (x))
;;


let inc = fn r:ref<int>,z:int->int => { r := z(!r + 1); !r};
let age = box (1);
inc (age) (fn x:int => { x + 1 })
;;
